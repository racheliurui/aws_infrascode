# Stack Deletion Behaviour: All resources being created will be deleted
AWSTemplateFormatVersion: '2010-09-09'
# modifed from https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/RDS/RDS_MySQL_With_Read_Replica.yaml
Description: 'AWS CloudFormation Sample snippit to .'
Mappings:
###########
  Constants:
      ConfluenceDatabaseName:
        value: "ConfluenceDB"
      ImageId:
        value: "ami-dc361ebf"
      # PostgreSQL DB instace selection: db.t2.micro, db.t2.small, db.t2.medium
      RDBInstanceClass:
        value: "db.t2.small"
      ConfluenceDBUser:
        value: "ConfluenceDBAdmin"
      # EC2 for Confluence Server: t2.micro, t2.small, t2.medium
      ConfluenceServerInstanceType:
        value: "t2.micro"
      Region:
        value: "ap-southeast-2"
      # Cofluence DB requirement
      # https://confluence.atlassian.com/doc/supported-platforms-207488198.html
      # Jira DB requirement
      # https://confluence.atlassian.com/adminjiraserver071/supported-platforms-802592168.html
      postgresVersion:
        value: "9.6.6"
      #https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
      #DBSubnetGroupDoesNotCoverEnoughAZs (RDB needs 2 AZ)
      AvailabilityZone1:
        value: "ap-southeast-2a"
      AvailabilityZone2:
        value: "ap-southeast-2b"


##### VPC Mapping######
  SubnetConfig:
      VPC:
        CIDR: "10.0.0.0/24"
      Public1:
        # max 16 instances
        CIDR: "10.0.0.16/28"
      Private1:
        CIDR: "10.0.0.32/28"
      Private2:
        CIDR: "10.0.0.48/28"

##### EC2 Mappings####


#########################
#
#   Parameters section
#
#########################

Parameters:
############EC2 Parameters##############
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
############RDB Parameters##############
  ConfluenceDBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.

######################VPC######################
#
#   Resource Section
#
###############################################

Resources:

##########VPC Resource Definition#####################
  VPC:
      Type: "AWS::EC2::VPC"
      Properties:
        EnableDnsSupport: "true"
        EnableDnsHostnames: "true"
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "VPC"
            - "CIDR"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "VPC with one public and 2 private subnets"
  PublicSubnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        AvailabilityZone: !FindInMap [Constants,"AvailabilityZone1",value]
        VpcId:
          Ref: "VPC"
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "Public1"
            - "CIDR"
        MapPublicIpOnLaunch: "true"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public1"
  PrivateSubnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        AvailabilityZone: !FindInMap [Constants,"AvailabilityZone1",value]
        VpcId:
          Ref: "VPC"
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "Private1"
            - "CIDR"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Private1"
  PrivateSubnet2:
      Type: "AWS::EC2::Subnet"
      Properties:
        AvailabilityZone: !FindInMap [Constants,"AvailabilityZone2",value]
        VpcId:
          Ref: "VPC"
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "Private2"
            - "CIDR"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Private2"

  InternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public1"
  GatewayToInternet:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId:
          Ref: "VPC"
        InternetGatewayId:
          Ref: "InternetGateway"
  PublicRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public1"
  PublicRoute:
      Type: "AWS::EC2::Route"
      DependsOn: "GatewayToInternet"
      Properties:
        RouteTableId:
          Ref: "PublicRouteTable"
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId:
          Ref: "InternetGateway"
  PublicSubnetRouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet1"
        RouteTableId:
          Ref: "PublicRouteTable"
  PublicNetworkAcl:
      Type: "AWS::EC2::NetworkAcl"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public1"
  InboundHTTPPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "false"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"
  OutboundPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "true"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"
  PublicSubnetNetworkAclAssociation:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet1"
        NetworkAclId:
          Ref: "PublicNetworkAcl"
  NATGateway:
      Type: "AWS::EC2::NatGateway"
      Properties:
        AllocationId:
          Fn::GetAtt:
            - "ElasticIP"
            - "AllocationId"
        SubnetId:
          Ref: "PublicSubnet1"
  ElasticIP:
      Type: "AWS::EC2::EIP"
      Properties:
        Domain: "vpc"
  PrivateRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
  PrivateRouteToInternet:
      Type: "AWS::EC2::Route"
      Properties:
        RouteTableId:
          Ref: "PrivateRouteTable"
        DestinationCidrBlock: "0.0.0.0/0"
        NatGatewayId:
          Ref: "NATGateway"
  PrivateSubnet1RouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubnet1"
        RouteTableId:
          Ref: "PrivateRouteTable"
  PrivateSubnet2RouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubnet2"
        RouteTableId:
          Ref: "PrivateRouteTable"
#######IAM Resource Definition#############
  ConflueceEC2ServerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: "*"
          Resource: "*"
      Roles:
      - !Ref ConflueceEC2ServerRole
  ConfluenceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref ConflueceEC2ServerRole
######################EC2 Resource Definition###########
  ConfluenceDataEBSVolumn:
    Type: AWS::EC2::Volume
    # for test purpose; review
    Properties:
      Size: 1
      AvailabilityZone: !GetAtt ConfluenceEC2Instance.AvailabilityZone
  ConfluenceEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !FindInMap [Constants,"ConfluenceServerInstanceType",value]
      # Instance in VPC must specify security gourp ID
      SecurityGroupIds: [!GetAtt [ConfluenceInstanceSecurityGroup,GroupId]]
      KeyName: !Ref 'KeyName'
      #https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/EC2/EC2InstanceWithSecurityGroupSample.yaml
      ImageId: !FindInMap [Constants,"ImageId",value]
      IamInstanceProfile:
        !Ref ConfluenceInstanceProfile
      UserData:
        Fn::Base64: !Sub |
              #!/bin/bash -xe
              # create mount point directory
              mkdir /mnt/data
              # create ext4 filesystem on new volume
              mkfs -t ext4 /dev/sdh
              # add an entry to fstab to mount volume during boot
              echo "/dev/sdh /mnt/data ext4 defaults,nofail 0 2" >> /etc/fstab
              # mount the volume on current boot
              mount -a
      SubnetId:
        Ref: PublicSubnet1
      Tags:
       -
        Key: "Application"
        Value:
          Ref: "AWS::StackName"
    DependsOn: ["ConfluenceInstanceSecurityGroup", "PublicSubnet1","ConflueceEC2ServerRole"]
  ConfluenceInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Confluence Server
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 8090
        ToPort: 8090
        CidrIp: !Ref 'SSHLocation'
      # Security Group belongs to certain VPC
      VpcId:
       Ref: VPC
    DependsOn: ["VPC"]
  ConfluenceDataEBSMountPoint:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref ConfluenceEC2Instance
      VolumeId: !Ref ConfluenceDataEBSVolumn
      Device: /dev/sdh

#################### RDS######################
  ConfluenceDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Private Subnet for RDS"
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
    DependsOn: ["ConfluenceEC2Instance","VPC", "PrivateSubnet1","PrivateSubnet2"]
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5432'
        ToPort: '5432'
        SourceSecurityGroupId: !GetAtt [ConfluenceInstanceSecurityGroup,GroupId]
      # Security Group belongs to certain VPC
      VpcId:
        Ref: VPC
    DependsOn: ["ConfluenceInstanceSecurityGroup","VPC"]
  ConfluenceMasterDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !FindInMap [Constants,"ConfluenceDatabaseName",value]
      AllocatedStorage: 10 # free tier
      DBInstanceClass: !FindInMap [Constants,"RDBInstanceClass",value]
      # https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html
      Engine: postgres
      EngineVersion: !FindInMap [Constants,"postgresVersion",value]
      MasterUsername: !FindInMap [Constants,"ConfluenceDBUser",value]
      MasterUserPassword: !Ref 'ConfluenceDBPassword'
      # sepcify which subnet(s) the RDS service sits
      DBSubnetGroupName: !Ref 'ConfluenceDBSubnetGroup'
      VPCSecurityGroups: [!GetAtt [DBEC2SecurityGroup, GroupId]]
      Tags:
       -
        Key: "Name"
        Value: "Confluence PostgreSQL Database"
    DependsOn: ["ConfluenceEC2Instance","VPC", "PrivateSubnet1","PrivateSubnet2"]

#########################
#
#   Output  section
#
#########################
Outputs:

#### EC2 #################
  PublicDNS:
    Description: Confluence EC2 instance Public DNSName
    Value: !GetAtt [ConfluenceEC2Instance, PublicDnsName]

  ConfluenceDBAddress:
    Description: Confluence DB address
    Value:   !GetAtt [ConfluenceMasterDB,Endpoint.Address]
  ConfluenceDBPort:
     Description: Confluence DB port
     Value: !GetAtt [ConfluenceMasterDB, Endpoint.Port]
  ConfluenceDBName:
     Description: Confluence DB Name
     Value: !FindInMap [Constants,"ConfluenceDatabaseName",value]
  ConfluenceDBJDBCConnStr:
     Description: JDBC connection string for the replica database
     Value: !Join ['', ['jdbc:postgresql://', !GetAtt [ConfluenceMasterDB, Endpoint.Address], ':',!GetAtt [ConfluenceMasterDB, Endpoint.Port], /, !FindInMap [Constants,"ConfluenceDatabaseName",value]]]
