AWSTemplateFormatVersion: '2010-09-09'
# modifed from https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/RDS/RDS_MySQL_With_Read_Replica.yaml
Description: 'AWS CloudFormation Sample snippit to .'
Mappings:
###########
  Constants:
      DBName:
        value: "ConfluenceDB"
      # PostgreSQL DB instace selection: db.t2.micro, db.t2.small, db.t2.medium
      RDBInstanceClass:
        value: "db.t2.small"
      ConfluenceDBUser:
        value: "ConfluenceDBAdmin"
      # EC2 for Confluence Server: t2.micro, t2.small, t2.medium
      ConfluenceServerInstanceType:
        value: "t2.medium"
      Region:
        value: "ap-southeast-2"

##### VPC Mapping######
  SubnetConfig:
      VPC:
        CIDR: "10.0.0.0/24"
      Public:
        # max 16 instances
        CIDR: "10.0.0.16/28"
      Private:
        CIDR: "10.0.0.32/28"

##### EC2 Mappings####


#########################
#
#   Parameters section
#
#########################

Parameters:
############EC2 Parameters##############
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
############RDB Parameters##############
  ConfluenceDBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.
  EC2SecurityGroup:
    Description: The EC2 security group that contains instances that need access to
      the database
    Default: default
    Type: String
    AllowedPattern: '[a-zA-Z0-9\-]+'
    ConstraintDescription: must be a valid security group name.

######################VPC######################
#
#   Resource Section
#
###############################################

Resources:

##########VPC Resource Definition#####################
  VPC:
      Type: "AWS::EC2::VPC"
      Properties:
        EnableDnsSupport: "true"
        EnableDnsHostnames: "true"
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "VPC"
            - "CIDR"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public and Private VPC and private"
  PublicSubnet:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "Public"
            - "CIDR"
        MapPublicIpOnLaunch: "true"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
  PrivateSubnet:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "Private"
            - "CIDR"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Private"
  InternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
  GatewayToInternet:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId:
          Ref: "VPC"
        InternetGatewayId:
          Ref: "InternetGateway"
  PublicRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
  PublicRoute:
      Type: "AWS::EC2::Route"
      DependsOn: "GatewayToInternet"
      Properties:
        RouteTableId:
          Ref: "PublicRouteTable"
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId:
          Ref: "InternetGateway"
  PublicSubnetRouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet"
        RouteTableId:
          Ref: "PublicRouteTable"
  PublicNetworkAcl:
      Type: "AWS::EC2::NetworkAcl"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
  InboundHTTPPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "false"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"
  OutboundPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "true"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"
  PublicSubnetNetworkAclAssociation:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet"
        NetworkAclId:
          Ref: "PublicNetworkAcl"
  NATGateway:
      Type: "AWS::EC2::NatGateway"
      Properties:
        AllocationId:
          Fn::GetAtt:
            - "ElasticIP"
            - "AllocationId"
        SubnetId:
          Ref: "PublicSubnet"
  ElasticIP:
      Type: "AWS::EC2::EIP"
      Properties:
        Domain: "vpc"
  PrivateRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
  PrivateRouteToInternet:
      Type: "AWS::EC2::Route"
      Properties:
        RouteTableId:
          Ref: "PrivateRouteTable"
        DestinationCidrBlock: "0.0.0.0/0"
        NatGatewayId:
          Ref: "NATGateway"
  PrivateSubnetRouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubnet"
        RouteTableId:
          Ref: "PrivateRouteTable"

#######IAM Resource Definition#############
  ConflueceEC2ServerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: "*"
          Resource: "*"
      Roles:
      - !Ref ConflueceEC2ServerRole
  ConfluenceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref ConflueceEC2ServerRole
######################EC2 Resource Definition###########
  ConfluenceDataEBSVolumn:
    Type: AWS::EC2::Volume
    Properties:
      Size: 5
      AvailabilityZone: !GetAtt ConfluenceEC2Instance.AvailabilityZone
  ConfluenceEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !FindInMap [Constants,"ConfluenceServerInstanceType",value]
      SecurityGroups: [!Ref 'ConfluenceInstanceSecurityGroup']
      KeyName: !Ref 'KeyName'
      #https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/EC2/EC2InstanceWithSecurityGroupSample.yaml
      ImageId: ami-dc361ebf
      IamInstanceProfile:
        !Ref ConfluenceInstanceProfile
      UserData:
        Fn::Base64: !Sub |
              #!/bin/bash -xe
              # create mount point directory
              mkdir /mnt/data
              # create ext4 filesystem on new volume
              mkfs -t ext4 /dev/sdh
              # add an entry to fstab to mount volume during boot
              echo "/dev/sdh /mnt/data ext4 defaults,nofail 0 2" >> /etc/fstab
              # mount the volume on current boot
              mount -a

      Tags:
       -
        Key: "Application"
        Value:
          Ref: "AWS::StackName"

  ConfluenceInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Confluence Server
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 8090
        ToPort: 8090
        CidrIp: !Ref 'SSHLocation'
  ConfluenceDataEBSMountPoint:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref ConfluenceEC2Instance
      VolumeId: !Ref ConfluenceDataEBSVolumn
      Device: /dev/sdh

#################### RDS######################
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5432'
        ToPort: '5432'
        SourceSecurityGroupName: !Ref 'ConfluenceInstanceSecurityGroup'
  ConfluenceMasterDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !FindInMap [Constants,"DBName",value]
      AllocatedStorage: 20 # free tier
      DBInstanceClass: !FindInMap [Constants,"RDBInstanceClass",value]
      Engine: PostgreSQL
      MasterUsername: !FindInMap [Constants,"ConfluenceDBUser",value]
      MasterUserPassword: !Ref 'ConfluenceDBPassword'
      VPCSecurityGroups: [!GetAtt [DBEC2SecurityGroup, GroupId]]
      Tags:
       -
        Key: "Name"
        Value: "Confluence PostgreSQL Database"


#########################
#
#   Output  section
#
#########################
Outputs:

#### EC2 #################
  PublicDNS:
    Description: Public DNSName of the newly created Confluence EC2 instance
    Value: !GetAtt [ConfluenceEC2Instance, PublicDnsName]

#  MasterJDBCConnectionString:
#    Description: JDBC connection string for the master database
#    Value:  !Join[!GetAtt [ConfluenceMasterDB,Endpoint.Address], ':',!GetAtt [ConfluenceMasterDB, Endpoint.Port],!FindInMap[Constants,"DBName",value]]]
