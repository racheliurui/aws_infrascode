AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: a sample lambda to dynamic binding server dns when it starts

Parameters:
    HostedZoneIdVar:
        Description: 'Required. Hosted Zone Id'
        Type: 'String'
    TagName:
        Description: 'Required. Tag that contains the DNS Record'
        Type: 'String'

Resources:
  lambdarole:
    Type: "AWS::IAM::Role"
    Properties:
       AssumeRolePolicyDocument:
         Version: 2012-10-17
         Statement:
           - Effect: Allow
             Principal:
               Service: "lambda.amazonaws.com"
             Action: "sts:AssumeRole"
       Path: /
       Policies:
         - PolicyName: lambda_dynamic_dns_policy
           PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: [
                "rds:Describe*",
                "rds:ListTagsForResource",
                ]
                Resource: '*'
              - Effect: Allow
                Action: [
                "ec2:Describe*"
                ]
                Resource: '*'
              - Effect: Allow
                Action: [
                "cloudwatch:GetMetricStatistics",
                "logs:DescribeLogStreams",
                "logs:GetLogEvents"
                ]
                Resource: '*'
              - Effect: Allow
                Action: [
                "logs:CreateLogGroup"
                ]
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action: [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
                ]
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Lambda_Dynamic_DNS_EC2:*'
              - Effect: Allow
                Action: [
                "route53:GetChange",
                "route53:GetHostedZone",
                "route53:List*",
                "route53:ChangeResourceRecordSets"
                ]
                Resource: '*'
       RoleName: !Sub 'lambda_dynamic_dns_role_${AWS::Region}'

  ec2dynamicdnspython:
    Type: 'AWS::Serverless::Function'
    DependsOn: ["lambdarole"]
    Properties:
      Description: generated from SAM with name ec2dynamicdnspython.
      Runtime: python3.7
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/lambda_dynamic_dns_role_${AWS::Region}'
      FunctionName: Lambda_Dynamic_DNS_EC2
      Handler: lambda_function.lambda_ec2_dns_handler
      CodeUri: ./src/
      MemorySize: 128
      Timeout: 30
      Events:
        EC2StartEvent:
          Type: CloudWatchEvent
          Properties:
             Pattern:
                   source:
                          - "aws.ec2"
                   detail-type:
                          - "EC2 Instance State-change Notification"
                   detail:
                     state:
                       - running
      Environment:
          Variables:
             HostedZoneIdVar: !Ref HostedZoneIdVar
             TagName: !Ref TagName

#############################################################
#
#  lambda function triggerred by scheduler to update RDS DNS
#
#############################################################


  rdsdynamicdnspython:
    Type: 'AWS::Serverless::Function'
    DependsOn: ["lambdarole"]
    Properties:
      Description: generated from SAM with name rdsdynamicdnspython.
      Runtime: python3.7
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/lambda_dynamic_dns_role_${AWS::Region}'
      FunctionName: Lambda_Dynamic_DNS_RDS
      Handler: lambda_function.lambda_rds_dns_handler
      CodeUri: ./src/
      MemorySize: 128
      Timeout: 30
      Events:
        CheckRDSDNS:
          Type: Schedule
          Properties:
            Schedule: rate(2 hours)
      Environment:
          Variables:
             HostedZoneIdVar: !Ref HostedZoneIdVar
             TagName: !Ref TagName
